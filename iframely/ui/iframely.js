/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Iframely oembed scripts\n */\nvar createHigherOrderComponent = wp.compose.createHigherOrderComponent;\nvar _wp$element = wp.element,\n    Fragment = _wp$element.Fragment,\n    RawHTML = _wp$element.RawHTML,\n    renderToString = _wp$element.renderToString;\nvar InspectorControls = wp.blockEditor.InspectorControls;\n\nvar iEvent = new RegExp(\"setIframelyEmbedOptions\");\nvar PanelBody = wp.components.PanelBody;\n\n\nfunction findIframeByContentWindow(iframes, contentWindow) {\n    var foundIframe = void 0;\n    for (var i = 0; i < iframes.length && !foundIframe; i++) {\n        var iframe = iframes[i];\n        if (iframe.contentWindow === contentWindow) {\n            foundIframe = iframe;\n        }\n    }\n    return foundIframe;\n}\n\nfunction getSelectedBlockID() {\n    return wp.data.select('core/editor').getBlockSelectionStart();\n}\n\nfunction addIframelyString(url, query) {\n    var newUrl = url.replace(/(?:&amp;|\\?|&)?iframely=(.+)$/, '');\n    newUrl += Object.keys(query).length === 0 ? '' : (/\\?/.test(newUrl) ? '&' : '?') + 'iframely=' + window.btoa(JSON.stringify(query));\n\n    return newUrl;\n}\n\nif (iframely) {\n    // Failsafe in case of iframely name space not accessible.\n    // E.g. no internet connection\n    iframely.on('options-changed', function (id, formContainer, query) {\n\n        var selector = 'div#block-' + getSelectedBlockID();\n        var iframe = document.querySelector(selector + ' iframe').contentWindow.document.querySelector('iframe');\n\n        var preview = $(selector).find('iframe');\n\n        if (preview && preview.data() && preview.data().data && preview.data().context) {\n            var data = preview.data();\n\n            var src = data.context;\n\n            // wipe out old query completely\n            if (data.data.query && data.data.query.length > 0) {\n                data.data.query.forEach(function (key) {\n                    if (src.indexOf(key) > -1) {\n                        src = src.replace(new RegExp('&?' + key.replace('-', '\\\\-') + '=[^\\\\?\\\\&]+'), ''); // delete old key\n                    };\n                });\n            }\n            // and add entire new query instead\n            Object.keys(query).forEach(function (key) {\n                src += (src.indexOf('?') > -1 ? '&' : '?') + key + '=' + query[key];\n            });\n\n            iframe.src = src;\n\n            wp.data.dispatch('core/block-editor').updateBlockAttributes(getSelectedBlockID(), { iquery: query });\n        }\n    });\n}\n\nfunction updateForm() {\n    // always single instance of form for all blocks...\n    var selector = 'div#block-' + getSelectedBlockID();\n    var preview = $(selector).find('iframe');\n\n    if (preview && $(preview).data()) {\n\n        iframely.buildOptionsForm(getSelectedBlockID(), $('div#ifopts').get(0), $(preview).data().data);\n    }\n}\n\nwindow.addEventListener(\"message\", function (e) {\n    // Listen for messages from iframe proxy script\n    if (iEvent.test(e.data)) {\n\n        var frames = document.getElementsByTagName(\"iframe\"),\n            iframe = findIframeByContentWindow(frames, e.source);\n\n        var data = JSON.parse(e.data);\n        $(iframe).data(data); // Store current state of options form in the iframe\n\n        // update only if the form is open. If not, it will be built on render\n        var block = wp.data.select('core/editor').getBlock(getSelectedBlockID());\n        if (block && /^core\\-?\\/?embed/i.test(block.name)) {\n            updateForm();\n        }\n    }\n}, false);\n\nfunction addAttributes(settings) {\n\n    if (/^embed$/i.test(settings.category) && typeof settings.attributes !== 'undefined' && !settings.attributes.iquery) {\n        settings.attributes = Object.assign(settings.attributes, {\n            iquery: {\n                type: 'string',\n                default: ''\n            }\n        });\n    }\n\n    return settings;\n}\nwp.hooks.addFilter('blocks.registerBlockType', 'iframely/add-attributes', addAttributes);\n\nfunction saveQueryURL(element, blockType, attributes) {\n\n    if (/^embed$/i.test(blockType.category), attributes.iquery && attributes.url) {\n        var url = attributes.url;\n        var newUrl = addIframelyString(attributes.url, attributes.iquery);\n        attributes.url = newUrl; // this is to pass blocks validation\n\n        // Cache busting doesn't seem to be needed\n        /* \n            // bust the cache preview, so it re-renders when returning to previous options\n            // also warms up cache if URL is new, as the next time getEmbedPreview will return cached value\n            if (wp.data.select( 'core' ).getEmbedPreview(newUrl)) {\n                wp.data.dispatch('core/data').invalidateResolution( 'core', 'getEmbedPreview', [ newUrl ] );\n            }\n        */\n\n        var s = renderToString(element).replace(/&amp;/g, '&');\n\n        var elAsString = s.replace(url, newUrl);\n\n        return wp.element.createElement(\n            RawHTML,\n            null,\n            elAsString\n        );\n    } else {\n        return element;\n    }\n}\nwp.hooks.addFilter('blocks.getSaveElement', 'iframely/save-query', saveQueryURL);\n\nvar IframelyOptions = function (_React$Component) {\n    _inherits(IframelyOptions, _React$Component);\n\n    function IframelyOptions() {\n        _classCallCheck(this, IframelyOptions);\n\n        return _possibleConstructorReturn(this, (IframelyOptions.__proto__ || Object.getPrototypeOf(IframelyOptions)).apply(this, arguments));\n    }\n\n    _createClass(IframelyOptions, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            updateForm();\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            return wp.element.createElement('div', { id: 'ifopts'\n            });\n        }\n    }]);\n\n    return IframelyOptions;\n}(React.Component);\n\nIframelyOptions.defaultProps = {};\nvar withInspectorControls = createHigherOrderComponent(function (BlockEdit) {\n    return function (props) {\n        if (props.isSelected === true && /^core\\-?\\/?embed/i.test(props.name)) {\n            return wp.element.createElement(\n                Fragment,\n                null,\n                wp.element.createElement(BlockEdit, props),\n                wp.element.createElement(\n                    InspectorControls,\n                    null,\n                    wp.element.createElement(\n                        PanelBody,\n                        { title: 'Iframely options' },\n                        wp.element.createElement(IframelyOptions, null)\n                    )\n                )\n            );\n        } else {\n            return wp.element.createElement(\n                Fragment,\n                null,\n                wp.element.createElement(BlockEdit, props)\n            );\n        }\n    };\n}, \"withInspectorControl\");\n\nwp.hooks.addFilter('editor.BlockEdit', 'iframely/with-inspector-controls', withInspectorControls);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJjcmVhdGVIaWdoZXJPcmRlckNvbXBvbmVudCIsIndwIiwiY29tcG9zZSIsImVsZW1lbnQiLCJGcmFnbWVudCIsIlJhd0hUTUwiLCJyZW5kZXJUb1N0cmluZyIsIkluc3BlY3RvckNvbnRyb2xzIiwiYmxvY2tFZGl0b3IiLCJpRXZlbnQiLCJSZWdFeHAiLCJQYW5lbEJvZHkiLCJjb21wb25lbnRzIiwiZmluZElmcmFtZUJ5Q29udGVudFdpbmRvdyIsImlmcmFtZXMiLCJjb250ZW50V2luZG93IiwiZm91bmRJZnJhbWUiLCJpIiwibGVuZ3RoIiwiaWZyYW1lIiwiZ2V0U2VsZWN0ZWRCbG9ja0lEIiwiZGF0YSIsInNlbGVjdCIsImdldEJsb2NrU2VsZWN0aW9uU3RhcnQiLCJhZGRJZnJhbWVseVN0cmluZyIsInVybCIsInF1ZXJ5IiwibmV3VXJsIiwicmVwbGFjZSIsIk9iamVjdCIsImtleXMiLCJ0ZXN0Iiwid2luZG93IiwiYnRvYSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpZnJhbWVseSIsIm9uIiwiaWQiLCJmb3JtQ29udGFpbmVyIiwic2VsZWN0b3IiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJwcmV2aWV3IiwiJCIsImZpbmQiLCJjb250ZXh0Iiwic3JjIiwiZm9yRWFjaCIsImtleSIsImluZGV4T2YiLCJkaXNwYXRjaCIsInVwZGF0ZUJsb2NrQXR0cmlidXRlcyIsImlxdWVyeSIsInVwZGF0ZUZvcm0iLCJidWlsZE9wdGlvbnNGb3JtIiwiZ2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJmcmFtZXMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNvdXJjZSIsInBhcnNlIiwiYmxvY2siLCJnZXRCbG9jayIsIm5hbWUiLCJhZGRBdHRyaWJ1dGVzIiwic2V0dGluZ3MiLCJjYXRlZ29yeSIsImF0dHJpYnV0ZXMiLCJhc3NpZ24iLCJ0eXBlIiwiZGVmYXVsdCIsImhvb2tzIiwiYWRkRmlsdGVyIiwic2F2ZVF1ZXJ5VVJMIiwiYmxvY2tUeXBlIiwicyIsImVsQXNTdHJpbmciLCJJZnJhbWVseU9wdGlvbnMiLCJSZWFjdCIsIkNvbXBvbmVudCIsImRlZmF1bHRQcm9wcyIsIndpdGhJbnNwZWN0b3JDb250cm9scyIsIkJsb2NrRWRpdCIsInByb3BzIiwiaXNTZWxlY3RlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7O0lBR1FBLDBCLEdBQStCQyxHQUFHQyxPLENBQWxDRiwwQjtrQkFDcUNDLEdBQUdFLE87SUFBeENDLFEsZUFBQUEsUTtJQUFVQyxPLGVBQUFBLE87SUFBU0MsYyxlQUFBQSxjO0lBQ25CQyxpQixHQUFzQk4sR0FBR08sVyxDQUF6QkQsaUI7O0FBQ1IsSUFBTUUsU0FBUyxJQUFJQyxNQUFKLENBQVcseUJBQVgsQ0FBZjtJQUNRQyxTLEdBQWNWLEdBQUdXLFUsQ0FBakJELFM7OztBQUVSLFNBQVNFLHlCQUFULENBQW1DQyxPQUFuQyxFQUE0Q0MsYUFBNUMsRUFBMkQ7QUFDdkQsUUFBSUMsb0JBQUo7QUFDQSxTQUFJLElBQUlDLElBQUksQ0FBWixFQUFlQSxJQUFJSCxRQUFRSSxNQUFaLElBQXNCLENBQUNGLFdBQXRDLEVBQW1EQyxHQUFuRCxFQUF3RDtBQUNwRCxZQUFJRSxTQUFTTCxRQUFRRyxDQUFSLENBQWI7QUFDQSxZQUFJRSxPQUFPSixhQUFQLEtBQXlCQSxhQUE3QixFQUE0QztBQUN4Q0MsMEJBQWNHLE1BQWQ7QUFDSDtBQUNKO0FBQ0QsV0FBT0gsV0FBUDtBQUNIOztBQUVELFNBQVNJLGtCQUFULEdBQThCO0FBQzFCLFdBQU9uQixHQUFHb0IsSUFBSCxDQUFRQyxNQUFSLENBQWUsYUFBZixFQUE4QkMsc0JBQTlCLEVBQVA7QUFDSDs7QUFFRCxTQUFTQyxpQkFBVCxDQUEyQkMsR0FBM0IsRUFBZ0NDLEtBQWhDLEVBQXVDO0FBQ25DLFFBQUlDLFNBQVNGLElBQUlHLE9BQUosQ0FBWSwrQkFBWixFQUE2QyxFQUE3QyxDQUFiO0FBQ0FELGNBQVVFLE9B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QixLQUFoQixDQURKO0FBRUk7QUFBQyxxQ0FBRDtBQUFBO0FBQ1E7QUFBQyxpQ0FBRDtBQUFBLDBCQUFXLE9BQU0sa0JBQWpCO0FBQ0ksaURBQUMsZUFBRDtBQURKO0FBRFI7QUFGSixhQURKO0FBVUgsU0FYRCxNQVdPO0FBQ0gsbUJBQVE7QUFBQyx3QkFBRDtBQUFBO0FBQVUseUNBQUMsU0FBRCxFQUFnQkEsS0FBaEI7QUFBVixhQUFSO0FBQ0g7QUFDSixLQWZEO0FBZ0JILENBakI2QixFQWlCM0Isc0JBakIyQixDQUE5Qjs7QUFtQkFwRixHQUFHd0UsS0FBSCxDQUFTQyxTQUFULENBQW9CLGtCQUFwQixFQUF3QyxrQ0FBeEMsRUFBNEVTLHFCQUE1RSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJZnJhbWVseSBvZW1iZWQgc2NyaXB0c1xuICovXG5jb25zdCB7IGNyZWF0ZUhpZ2hlck9yZGVyQ29tcG9uZW50IH0gPSB3cC5jb21wb3NlO1xuY29uc3QgeyBGcmFnbWVudCwgUmF3SFRNTCwgcmVuZGVyVG9TdHJpbmd9ID0gd3AuZWxlbWVudDtcbmNvbnN0IHsgSW5zcGVjdG9yQ29udHJvbHMgfSA9IHdwLmJsb2NrRWRpdG9yO1xuY29uc3QgaUV2ZW50ID0gbmV3IFJlZ0V4cChcInNldElmcmFtZWx5RW1iZWRPcHRpb25zXCIpO1xuY29uc3QgeyBQYW5lbEJvZHkgfSA9IHdwLmNvbXBvbmVudHM7XG5cbmZ1bmN0aW9uIGZpbmRJZnJhbWVCeUNvbnRlbnRXaW5kb3coaWZyYW1lcywgY29udGVudFdpbmRvdykge1xuICAgIGxldCBmb3VuZElmcmFtZTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgaWZyYW1lcy5sZW5ndGggJiYgIWZvdW5kSWZyYW1lOyBpKyspIHtcbiAgICAgICAgbGV0IGlmcmFtZSA9IGlmcmFtZXNbaV07XG4gICAgICAgIGlmIChpZnJhbWUuY29udGVudFdpbmRvdyA9PT0gY29udGVudFdpbmRvdykge1xuICAgICAgICAgICAgZm91bmRJZnJhbWUgPSBpZnJhbWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZvdW5kSWZyYW1lO1xufVxuXG5mdW5jdGlvbiBnZXRTZWxlY3RlZEJsb2NrSUQoKSB7XG4gICAgcmV0dXJuIHdwLmRhdGEuc2VsZWN0KCdjb3JlL2VkaXRvcicpLmdldEJsb2NrU2VsZWN0aW9uU3RhcnQoKTtcbn1cblxuZnVuY3Rpb24gYWRkSWZyYW1lbHlTdHJpbmcodXJsLCBxdWVyeSkge1xuICAgIGxldCBuZXdVcmwgPSB1cmwucmVwbGFjZSgvKD86JmFtcDt8XFw/fCYpP2lmcmFtZWx5PSguKykkLywgJycpO1xuICAgIG5ld1VybCArPSBPYmplY3Qua2V5cyhxdWVyeSkubGVuZ3RoID09PSAwID8gJycgOiAoKC9cXD8vLnRlc3QobmV3VXJsKSA/ICcmJzogJz8nKSArICdpZnJhbWVseT0nICsgd2luZG93LmJ0b2EoSlNPTi5zdHJpbmdpZnkocXVlcnkpKSk7XG5cbiAgICByZXR1cm4gbmV3VXJsO1xufVxuXG5pZiAoaWZyYW1lbHkpIHtcbiAgICAvLyBGYWlsc2FmZSBpbiBjYXNlIG9mIGlmcmFtZWx5IG5hbWUgc3BhY2Ugbm90IGFjY2Vzc2libGUuXG4gICAgLy8gRS5nLiBubyBpbnRlcm5ldCBjb25uZWN0aW9uXG4gICAgaWZyYW1lbHkub24oJ29wdGlvbnMtY2hhbmdlZCcsIGZ1bmN0aW9uKGlkLCBmb3JtQ29udGFpbmVyLCBxdWVyeSkge1xuXG4gICAgICAgIGNvbnN0IHNlbGVjdG9yID0gJ2RpdiNibG9jay0nICsgZ2V0U2VsZWN0ZWRCbG9ja0lEKCk7XG4gICAgICAgIGNvbnN0IGlmcmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IgKyAnIGlmcmFtZScpLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaWZyYW1lJyk7XG5cbiAgICAgICAgY29uc3QgcHJldmlldyA9ICQoc2VsZWN0b3IpLmZpbmQoJ2lmcmFtZScpO1xuXG4gICAgICAgIGlmIChwcmV2aWV3ICYmIHByZXZpZXcuZGF0YSgpICYmIHByZXZpZXcuZGF0YSgpLmRhdGEgJiYgcHJldmlldy5kYXRhKCkuY29udGV4dCkge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHByZXZpZXcuZGF0YSgpO1xuXG4gICAgICAgICAgICBsZXQgc3JjID0gZGF0YS5jb250ZXh0O1xuXG4gICAgICAgICAgICAvLyB3aXBlIG91dCBvbGQgcXVlcnkgY29tcGxldGVseVxuICAgICAgICAgICAgaWYgKGRhdGEuZGF0YS5xdWVyeSAmJiBkYXRhLmRhdGEucXVlcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGRhdGEuZGF0YS5xdWVyeS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3JjLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcmMgPSBzcmMucmVwbGFjZSAobmV3IFJlZ0V4cCAoJyY/JyArIGtleS5yZXBsYWNlKCctJywgJ1xcXFwtJykgKyAnPVteXFxcXD9cXFxcJl0rJyksICcnKTsgLy8gZGVsZXRlIG9sZCBrZXlcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGFuZCBhZGQgZW50aXJlIG5ldyBxdWVyeSBpbnN0ZWFkXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhxdWVyeSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgICAgICBzcmMgKz0gKHNyYy5pbmRleE9mKCc/JykgPiAtMSA/ICcmJyA6ICc/JykgKyBrZXkgKyAnPScgKyBxdWVyeVtrZXldO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmcmFtZS5zcmMgPSBzcmM7XG5cbiAgICAgICAgICAgIHdwLmRhdGEuZGlzcGF0Y2goJ2NvcmUvYmxvY2stZWRpdG9yJykudXBkYXRlQmxvY2tBdHRyaWJ1dGVzKFxuICAgICAgICAgICAgICAgIGdldFNlbGVjdGVkQmxvY2tJRCgpLFxuICAgICAgICAgICAgICAgIHtpcXVlcnk6IHF1ZXJ5fVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVGb3JtICgpIHsgLy8gYWx3YXlzIHNpbmdsZSBpbnN0YW5jZSBvZiBmb3JtIGZvciBhbGwgYmxvY2tzLi4uXG4gICAgbGV0IHNlbGVjdG9yID0gJ2RpdiNibG9jay0nICsgZ2V0U2VsZWN0ZWRCbG9ja0lEKCk7XG4gICAgbGV0IHByZXZpZXcgPSAkKHNlbGVjdG9yKS5maW5kKCdpZnJhbWUnKTtcblxuICAgIGlmIChwcmV2aWV3ICYmICQocHJldmlldykuZGF0YSgpKSB7XG5cbiAgICAgICAgaWZyYW1lbHkuYnVpbGRPcHRpb25zRm9ybShcbiAgICAgICAgICAgIGdldFNlbGVjdGVkQmxvY2tJRCgpLFxuICAgICAgICAgICAgJCgnZGl2I2lmb3B0cycpLmdldCgwKSwgXG4gICAgICAgICAgICAkKHByZXZpZXcpLmRhdGEoKS5kYXRhXG4gICAgICAgICk7XG4gICAgfVxufVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgZnVuY3Rpb24oZSkge1xuICAgIC8vIExpc3RlbiBmb3IgbWVzc2FnZXMgZnJvbSBpZnJhbWUgcHJveHkgc2NyaXB0XG4gICAgaWYoaUV2ZW50LnRlc3QoZS5kYXRhKSkge1xuXG4gICAgICAgIGxldCBmcmFtZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlmcmFtZVwiKSxcbiAgICAgICAgICAgIGlmcmFtZSA9IGZpbmRJZnJhbWVCeUNvbnRlbnRXaW5kb3coZnJhbWVzLCBlLnNvdXJjZSk7XG5cbiAgICAgICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKGUuZGF0YSk7XG4gICAgICAgICQoaWZyYW1lKS5kYXRhKGRhdGEpOyAvLyBTdG9yZSBjdXJyZW50IHN0YXRlIG9mIG9wdGlvbnMgZm9ybSBpbiB0aGUgaWZyYW1lXG5cbiAgICAgICAgLy8gdXBkYXRlIG9ubHkgaWYgdGhlIGZvcm0gaXMgb3Blbi4gSWYgbm90LCBpdCB3aWxsIGJlIGJ1aWx0IG9uIHJlbmRlclxuICAgICAgICBjb25zdCBibG9jayA9IHdwLmRhdGEuc2VsZWN0KCdjb3JlL2VkaXRvcicpLmdldEJsb2NrKGdldFNlbGVjdGVkQmxvY2tJRCgpKTtcbiAgICAgICAgaWYgKGJsb2NrICYmIC9eY29yZVxcLT9cXC8/ZW1iZWQvaS50ZXN0KGJsb2NrLm5hbWUpKSB7XG4gICAgICAgICAgICB1cGRhdGVGb3JtKCk7XG4gICAgICAgIH1cbiAgICB9XG59LGZhbHNlKTtcblxuZnVuY3Rpb24gYWRkQXR0cmlidXRlcyAoc2V0dGluZ3MpIHtcblxuICAgIGlmICgvXmVtYmVkJC9pLnRlc3Qoc2V0dGluZ3MuY2F0ZWdvcnkpICYmIHR5cGVvZiBzZXR0aW5ncy5hdHRyaWJ1dGVzICE9PSAndW5kZWZpbmVkJyAmJiAhc2V0dGluZ3MuYXR0cmlidXRlcy5pcXVlcnkpIHtcbiAgICAgICAgc2V0dGluZ3MuYXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oc2V0dGluZ3MuYXR0cmlidXRlcywge1xuICAgICAgICAgICAgaXF1ZXJ5OnsgXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7ICAgIFxuICAgIH1cblxuICAgIHJldHVybiBzZXR0aW5ncztcbn1cbndwLmhvb2tzLmFkZEZpbHRlciAoJ2Jsb2Nrcy5yZWdpc3RlckJsb2NrVHlwZScsICdpZnJhbWVseS9hZGQtYXR0cmlidXRlcycsIGFkZEF0dHJpYnV0ZXMpO1xuXG5cbmZ1bmN0aW9uIHNhdmVRdWVyeVVSTCAoZWxlbWVudCwgYmxvY2tUeXBlLCBhdHRyaWJ1dGVzKSB7XG5cbiAgICBpZiAoL15lbWJlZCQvaS50ZXN0KGJsb2NrVHlwZS5jYXRlZ29yeSksIGF0dHJpYnV0ZXMuaXF1ZXJ5ICYmIGF0dHJpYnV0ZXMudXJsKSB7XG4gICAgICAgIGxldCB1cmwgPSBhdHRyaWJ1dGVzLnVybDtcbiAgICAgICAgbGV0IG5ld1VybCA9IGFkZElmcmFtZWx5U3RyaW5nKGF0dHJpYnV0ZXMudXJsLCBhdHRyaWJ1dGVzLmlxdWVyeSk7XG4gICAgICAgIGF0dHJpYnV0ZXMudXJsID0gbmV3VXJsOyAvLyB0aGlzIGlzIHRvIHBhc3MgYmxvY2tzIHZhbGlkYXRpb25cblxuLy8gQ2FjaGUgYnVzdGluZyBkb2Vzbid0IHNlZW0gdG8gYmUgbmVlZGVkXG4vKiBcbiAgICAvLyBidXN0IHRoZSBjYWNoZSBwcmV2aWV3LCBzbyBpdCByZS1yZW5kZXJzIHdoZW4gcmV0dXJuaW5nIHRvIHByZXZpb3VzIG9wdGlvbnNcbiAgICAvLyBhbHNvIHdhcm1zIHVwIGNhY2hlIGlmIFVSTCBpcyBuZXcsIGFzIHRoZSBuZXh0IHRpbWUgZ2V0RW1iZWRQcmV2aWV3IHdpbGwgcmV0dXJuIGNhY2hlZCB2YWx1ZVxuICAgIGlmICh3cC5kYXRhLnNlbGVjdCggJ2NvcmUnICkuZ2V0RW1iZWRQcmV2aWV3KG5ld1VybCkpIHtcbiAgICAgICAgd3AuZGF0YS5kaXNwYXRjaCgnY29yZS9kYXRhJykuaW52YWxpZGF0ZVJlc29sdXRpb24oICdjb3JlJywgJ2dldEVtYmVkUHJldmlldycsIFsgbmV3VXJsIF0gKTtcbiAgICB9XG4qLyAgICAgICAgXG5cbiAgICAgICAgbGV0IHMgPSByZW5kZXJUb1N0cmluZyhlbGVtZW50KS5yZXBsYWNlKC8mYW1wOy9nLCAnJicpO1xuXG4gICAgICAgIGxldCBlbEFzU3RyaW5nID0gcy5yZXBsYWNlKHVybCwgbmV3VXJsKTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFJhd0hUTUw+e2VsQXNTdHJpbmd9PC9SYXdIVE1MPlxuICAgICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cbn1cbndwLmhvb2tzLmFkZEZpbHRlciAoJ2Jsb2Nrcy5nZXRTYXZlRWxlbWVudCcsICdpZnJhbWVseS9zYXZlLXF1ZXJ5Jywgc2F2ZVF1ZXJ5VVJMKTtcblxuXG5jbGFzcyBJZnJhbWVseU9wdGlvbnMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHVwZGF0ZUZvcm0oKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiA8ZGl2IGlkPVwiaWZvcHRzXCJcbiAgICAgICAgICAgID48L2Rpdj47XG4gICAgfVxufVxuXG5JZnJhbWVseU9wdGlvbnMuZGVmYXVsdFByb3BzID0ge307XG5jb25zdCB3aXRoSW5zcGVjdG9yQ29udHJvbHMgPSBjcmVhdGVIaWdoZXJPcmRlckNvbXBvbmVudCggKEJsb2NrRWRpdCkgPT4ge1xuICAgIHJldHVybiAocHJvcHMpID0+IHsgICAgICAgIFxuICAgICAgICBpZiAocHJvcHMuaXNTZWxlY3RlZCA9PT0gdHJ1ZSAmJiAvXmNvcmVcXC0/XFwvP2VtYmVkL2kudGVzdChwcm9wcy5uYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8RnJhZ21lbnQ+XG4gICAgICAgICAgICAgICAgICAgIDxCbG9ja0VkaXQgeyAuLi5wcm9wcyB9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxJbnNwZWN0b3JDb250cm9scz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFuZWxCb2R5IHRpdGxlPVwiSWZyYW1lbHkgb3B0aW9uc1wiID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPElmcmFtZWx5T3B0aW9ucy8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9QYW5lbEJvZHk+XG4gICAgICAgICAgICAgICAgICAgIDwvSW5zcGVjdG9yQ29udHJvbHM+XG4gICAgICAgICAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKDxGcmFnbWVudD48QmxvY2tFZGl0IHsgLi4ucHJvcHMgfSAvPjwvRnJhZ21lbnQ+KTtcbiAgICAgICAgfVxuICAgIH07XG59LCBcIndpdGhJbnNwZWN0b3JDb250cm9sXCIgKTtcblxud3AuaG9va3MuYWRkRmlsdGVyKCAnZWRpdG9yLkJsb2NrRWRpdCcsICdpZnJhbWVseS93aXRoLWluc3BlY3Rvci1jb250cm9scycsIHdpdGhJbnNwZWN0b3JDb250cm9scyApO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ]);