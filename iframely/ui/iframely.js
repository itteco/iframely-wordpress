/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

eval("var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Iframely URL options form scripts\n */\nvar createHigherOrderComponent = wp.compose.createHigherOrderComponent;\nvar _wp$element = wp.element,\n    Fragment = _wp$element.Fragment,\n    RawHTML = _wp$element.RawHTML,\n    renderToString = _wp$element.renderToString;\nvar InspectorControls = wp.blockEditor.InspectorControls;\n\nvar iEvent = new RegExp(\"setIframelyEmbedOptions\");\nvar PanelBody = wp.components.PanelBody;\n\nvar admHtml = 'If your <a href=\"https://iframely.com/plans\" target=\"_blank\">plan</a> supports it and config allows, Iframely will show <a href=\"https://iframely.com/docs/options\" target=\"_blank\">edit options</a> for selected URL here, whenever  available.';\nvar usrHtml = 'Iframely will show edit options for selected URL here, whenever  available.';\n\nfunction findIframeByContentWindow(iframes, contentWindow) {\n    var foundIframe = void 0;\n    for (var i = 0; i < iframes.length && !foundIframe; i++) {\n        var iframe = iframes[i];\n        if (iframe.contentWindow === contentWindow) {\n            foundIframe = iframe;\n        }\n    }\n    return foundIframe;\n}\n\nfunction getSelectedBlockID() {\n    return wp.data.select('core/editor').getBlockSelectionStart();\n}\n\nfunction addIframelyString(url, query) {\n    var newUrl = url.replace(/(?:&amp;|\\?|&)?iframely=(.+)$/, '');\n    newUrl += Object.keys(query).length === 0 ? '' : (/\\?/.test(newUrl) ? '&' : '?') + 'iframely=' + encodeURIComponent(window.btoa(JSON.stringify(query)));\n\n    return newUrl;\n}\n\nfunction loadIframelyEmbedJs($w) {\n    if ($w && !$w.iframely) {\n        // already loaded\n        var ifs = $w.document.createElement('script');ifs.type = 'text/javascript';ifs.async = true;\n        ifs.src = ('https:' == document.location.protocol ? 'https:' : 'http:') + '//if-cdn.com/embed.js';\n        var s = $w.document.getElementsByTagName('script')[0];s.parentNode.insertBefore(ifs, s);\n    }\n}\n\nif (iframely) {\n    // Failsafe in case of iframely name space not accessible.\n    // E.g. no internet connection\n    iframely.on('options-changed', function (id, formContainer, query) {\n\n        var selector = 'div#block-' + getSelectedBlockID();\n        var iframe = document.querySelector(selector + ' iframe').contentDocument.querySelector('iframe');\n\n        var preview = jQuery(selector).find('iframe');\n\n        if (preview && preview.data() && preview.data().data && preview.data().context) {\n            var data = preview.data();\n\n            var src = data.context;\n\n            // wipe out old query completely\n            if (data.data.query && data.data.query.length > 0) {\n                data.data.query.forEach(function (key) {\n                    if (src.indexOf(key) > -1) {\n                        src = src.replace(new RegExp('&?' + key.replace('-', '\\\\-') + '=[^\\\\?\\\\&]+'), ''); // delete old key\n                    };\n                });\n            }\n            // and add entire new query instead\n            Object.keys(query).forEach(function (key) {\n                src += (src.indexOf('?') > -1 ? '&' : '?') + key + '=' + query[key];\n            });\n\n            // load embed.js if it was missing to catch chaning sizes\n            loadIframelyEmbedJs(document.querySelector(selector + ' iframe').contentWindow);\n\n            iframe.src = src;\n\n            wp.data.dispatch('core/block-editor').updateBlockAttributes(getSelectedBlockID(), { iquery: query });\n        }\n    });\n}\n\nfunction updateForm() {\n    // always single instance of form for all blocks...\n    var selector = 'div#block-' + getSelectedBlockID();\n    var preview = jQuery(selector).find('iframe');\n\n    if (preview && jQuery(preview).data()) {\n\n        iframely.buildOptionsForm(getSelectedBlockID(), jQuery('div#ifopts').get(0), jQuery(preview).data().data);\n    }\n}\n\nwindow.addEventListener(\"message\", function (e) {\n    // Listen for messages from iframe proxy script\n    if (iEvent.test(e.data)) {\n\n        var frames = document.getElementsByTagName(\"iframe\"),\n            iframe = findIframeByContentWindow(frames, e.source);\n\n        var data = JSON.parse(e.data);\n        jQuery(iframe).data(data); // Store current state of options form in the iframe\n\n        // update only if the form is open. If not, it will be built on render\n        var block = wp.data.select('core/editor').getBlock(getSelectedBlockID());\n        if (block && /^core\\-?\\/?embed/i.test(block.name)) {\n            updateForm();\n        }\n    }\n}, false);\n\nfunction addAttributes(settings) {\n\n    if (/^embed$/i.test(settings.category) && typeof settings.attributes !== 'undefined' && !settings.attributes.iquery) {\n        settings.attributes = Object.assign(settings.attributes, {\n            iquery: {\n                type: 'string',\n                default: ''\n            }\n        });\n    }\n\n    return settings;\n}\nwp.hooks.addFilter('blocks.registerBlockType', 'iframely/add-attributes', addAttributes);\n\nfunction saveQueryURL(element, blockType, attributes) {\n\n    if (/^embed$/i.test(blockType.category), attributes.iquery && attributes.url) {\n        var url = attributes.url;\n        var newUrl = addIframelyString(attributes.url, attributes.iquery);\n        attributes.url = newUrl; // this is to pass blocks validation\n\n        // Cache busting doesn't seem to be needed\n        /* \n            // bust the cache preview, so it re-renders when returning to previous options\n            // also warms up cache if URL is new, as the next time getEmbedPreview will return cached value\n            if (wp.data.select( 'core' ).getEmbedPreview(newUrl)) {\n                wp.data.dispatch('core/data').invalidateResolution( 'core', 'getEmbedPreview', [ newUrl ] );\n            }\n        */\n\n        var s = renderToString(element).replace(/&amp;/g, '&');\n\n        var elAsString = s.replace(url, newUrl);\n\n        return wp.element.createElement(\n            RawHTML,\n            null,\n            elAsString\n        );\n    } else {\n        return element;\n    }\n}\nwp.hooks.addFilter('blocks.getSaveElement', 'iframely/save-query', saveQueryURL);\n\nvar IframelyOptions = function (_React$Component) {\n    _inherits(IframelyOptions, _React$Component);\n\n    function IframelyOptions() {\n        _classCallCheck(this, IframelyOptions);\n\n        return _possibleConstructorReturn(this, (IframelyOptions.__proto__ || Object.getPrototypeOf(IframelyOptions)).apply(this, arguments));\n    }\n\n    _createClass(IframelyOptions, [{\n        key: 'updateEmptyPlaceholder',\n        value: function updateEmptyPlaceholder() {\n            // Placeholder text in case of no options exist.\n            var formPlaceholder = jQuery('div#ifopts');\n            if (!formPlaceholder.html()) {\n                if (wp.data.select('core').canUser('create', 'users')) {\n                    formPlaceholder.html(admHtml);\n                } else {\n                    formPlaceholder.html(usrHtml);\n                }\n            }\n        }\n    }, {\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            updateForm();\n            this.updateEmptyPlaceholder();\n        }\n    }, {\n        key: 'componentDidUpdate',\n        value: function componentDidUpdate() {\n            this.updateEmptyPlaceholder();\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            return wp.element.createElement('div', { id: 'ifopts' });\n        }\n    }]);\n\n    return IframelyOptions;\n}(React.Component);\n\nvar withInspectorControls = createHigherOrderComponent(function (BlockEdit) {\n    return function (props) {\n        if (props.isSelected === true && /^core\\-?\\/?embed/i.test(props.name)) {\n            return wp.element.createElement(\n                Fragment,\n                null,\n                wp.element.createElement(BlockEdit, props),\n                wp.element.createElement(\n                    InspectorControls,\n                    null,\n                    wp.element.createElement(\n                        PanelBody,\n                        { title: 'Iframely options' },\n                        wp.element.createElement(IframelyOptions, null)\n                    )\n                )\n            );\n        } else {\n            return wp.element.createElement(\n                Fragment,\n                null,\n                wp.element.createElement(BlockEdit, props)\n            );\n        }\n    };\n}, \"withInspectorControl\");\n\nwp.hooks.addFilter('editor.BlockEdit', 'iframely/with-inspector-controls', withInspectorControls);\n// Preload to cache User Admin permission\nwp.data.select('core').canUser('create', 'users');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ]);